{"version":3,"sources":["Coin.js","Tosser.js","App.js","serviceWorker.js","index.js"],"names":["Coin","react_default","a","createElement","className","concat","this","props","flipping","src","face","alt","Component","Tosser","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","counter","countHeads","countTails","isFlipping","flipCoin","bind","assertThisInitialized","_this2","Math","round","random","setState","curState","objectSpread","setTimeout","src_Coin_0","onClick","App","src_Tosser","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gSAceA,0LARP,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAS,QAAAC,OAAUC,KAAKC,MAAMC,UAAW,iBAAmBC,IAAG,GAAAJ,OAH5D,mCAG4DA,OAAiBC,KAAKC,MAAMG,KAA5B,QAAwCC,IAAI,sBAL7GC,cCiDJC,cAhDb,SAAAA,EAAYN,GAAO,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAT,KAAAO,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAT,KAAAS,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAb,KAAMC,KACDa,MAAQ,CACXC,QAAS,EACTX,KAAM,QACNY,WAAY,EACZC,WAAY,EACZC,YAAY,GAEdV,EAAKW,SAAWX,EAAKW,SAASC,KAAdX,OAAAY,EAAA,EAAAZ,CAAAD,IATCA,0EAYR,IAAAc,EAAAtB,KAED,IADEuB,KAAKC,MAAMD,KAAKE,UAEtBzB,KAAK0B,SAAS,SAAAC,GAAQ,OAAAlB,OAAAmB,EAAA,EAAAnB,CAAA,GACjBkB,EADiB,CAEpBZ,QAASY,EAASZ,QAAU,EAC5BE,WAAYU,EAASV,WAAa,EAClCb,KAAM,YAERJ,KAAK0B,SAAS,SAAAC,GAAQ,OAAAlB,OAAAmB,EAAA,EAAAnB,CAAA,GACjBkB,EADiB,CAEpBZ,QAASY,EAASZ,QAAU,EAC5BC,WAAYW,EAASX,WAAa,EAClCZ,KAAM,YAEZyB,WAAW,WACTP,EAAKI,SAAS,CAAER,YAAY,KAC3B,GACHlB,KAAK0B,SAAS,CAAER,YAAY,qCAI5B,OACEvB,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAACiC,EAAD,CAAM1B,KAAMJ,KAAKc,MAAMV,KAAMF,SAAUF,KAAKc,MAAMI,aAClDvB,EAAAC,EAAAC,cAAA,UAAQkC,QAAS/B,KAAKmB,UAAtB,WACAxB,EAAAC,EAAAC,cAAA,mBACUG,KAAKc,MAAMC,QADrB,0BACqD,IAClDf,KAAKc,MAAME,WAFd,cAEqChB,KAAKc,MAAMG,WAFhD,kBAxCaX,mBCSN0B,MARf,WACE,OACErC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACoC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9480e810.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Coin.css';\n\nclass Coin extends Component {\n    render() {\n        let coinImage = 'https://tinyurl.com/react-coin-';\n        return (\n            <div>\n                <img className={`Coin ${this.props.flipping &&'Coin-flipping'}`} src={`${coinImage}${this.props.face}-jpg`} alt=\"coin-face\"></img>\n            </div>\n        )\n    }\n}\n\nexport default Coin;","import React, { Component } from \"react\";\nimport Coin from \"./Coin\";\n\nclass Tosser extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 0,\n      face: \"heads\",\n      countHeads: 0,\n      countTails: 0,\n      isFlipping: false\n    };\n    this.flipCoin = this.flipCoin.bind(this);\n  }\n\n  flipCoin() {\n    var val = Math.round(Math.random());\n    val === 0\n      ? this.setState(curState => ({\n          ...curState,\n          counter: curState.counter + 1,\n          countTails: curState.countTails + 1,\n          face: \"tails\"\n        }))\n      : this.setState(curState => ({\n          ...curState,\n          counter: curState.counter + 1,\n          countHeads: curState.countHeads + 1,\n          face: \"heads\"\n        }));\n    setTimeout(() => {\n      this.setState({ isFlipping: true });\n    }, 1);\n    this.setState({ isFlipping: false });\n  }\n\n  render() {\n    return (\n      <section>\n        <h1>Let's flip a coin!</h1>\n        <Coin face={this.state.face} flipping={this.state.isFlipping} />\n        <button onClick={this.flipCoin}>Flip me</button>\n        <p>\n          Out of {this.state.counter} flips, there have been{\" \"}\n          {this.state.countHeads} heads and {this.state.countTails} tails\n        </p>\n      </section>\n    );\n  }\n}\n\nexport default Tosser;\n","import React from 'react';\nimport Tosser from './Tosser';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Tosser />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}